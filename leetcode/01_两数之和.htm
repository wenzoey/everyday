<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <!-- 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
    你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
    示例:
    给定 nums = [2, 7, 11, 15], target = 9
    因为 nums[0] + nums[1] = 2 + 7 = 9
    所以返回 [0, 1] -->
    <script>
      // 方法1:暴力枚举
      // 时间复杂度：O(N^2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。
      // 空间复杂度：O(1)。
      // function sum (nums, target) {
      //   let l = nums.length
      //   let arr = []
      //   for (let i=0; i<l; i++) {
      //     for (let j=i+1; j<l; j++) {
      //       if (nums[i] + nums[j] === target) {
      //         arr.push(i)
      //         arr.push(j)
      //       }
      //     }
      //   }
      //   return arr
      // }

      // 方法2:哈希表
      // 时间复杂度：O(N)，其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 O(1) 地寻找 target - x。
      // 空间复杂度：O(N)，其中 N 是数组中的元素数量。主要为哈希表的开销。
      function sum (nums, target) {
        let l = nums.length
        const map = new Map()
        for (let i=0; i<l; i++) {
            if(map.has(nums[i])) return [map.get(nums[i]), i]
            map.set(target - nums[i], i)
        }
      }
    </script>
  </body>
</html>