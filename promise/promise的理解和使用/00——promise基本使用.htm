<!DOCTYPE html>
<html>
  <head></head>
  <body>
    <!-- 理解 -->
    1 抽象表达：Promise是JS中进行异步编程的新的解决方案 （旧的：纯回调形式）
    2 具体表达：
      1）从语法上来说：Promise是一个构造函数
      2）从功能上来说：Promise对象用来封装一个异步操作并可以获取其结果
    <!-- Promise的状态改变 -->
    1 pending 变为 resolved
    2 pending 变为 rejected
    说明：只有这2种，且一个promise对象只能改变一次
          无论变为成功还是失败，都会有一个结果数据
          成功的结果数据一般成为value，失败的结果数据一般称为reason
    <!-- promise的基本流程 -->
                                    成功了，执行resoleve()--------promise对象
    new Promise() ------执行异步操作                              resolved状态
    pending状态                      失败了，执行reject()----------promise对象
                                                                rejected状态
    .then() 成功失败都可以用 .catch 失败用 调用后返回一个新的promise对象

    <script>
      // 1. 创建一个promise对象
      const p = new Promise((resolve, reject) => {  // 执行器函数
        // 2. 执行异步操作任务
        setTimeout(() => {
          const time = Date.now() // 如果当前时间为偶数成功，否则失败
          // 3.1 如果成功了，调用resolve(value)
          if (time % 2 === 0) {
            resolve('成功的数据，time=' + time)
          } else {
          // 3.2 如果失败了，调用reject(reason)
            reject('失败的数据，time=' + time)
          }
        }, 1000);
      })

      p.then(
        value => { // 接收得到成功的value数据   onResolved
          console.log('成功的回调：', value)
        },
        reason => { // 接收得到失败的reason数据   onRejected
          console.log('失败的回调：', reason)
        }
      )

    </script>
  </body>
</html>